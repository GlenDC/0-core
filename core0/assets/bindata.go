// Code generated by go-bindata.
// sources:
// scripts/network.sh
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsNetworkSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x5d\x6f\xda\x4a\x10\x7d\x66\x7e\xc5\x89\xb1\x02\xe8\x5e\x5f\x3e\xa4\xfb\x42\x44\xa4\x2b\xdd\xa6\xad\xaa\x26\x55\x9b\xa7\x46\xa9\xb4\xb1\x87\x30\xc5\xec\x9a\xf5\x02\xf9\xfc\xef\xd5\xfa\x0b\x23\x95\x48\x15\x2f\xec\x7a\xe6\xcc\x9c\x39\x67\xa7\x7b\x32\xbc\x13\x3d\xcc\x17\x94\xb3\x43\xc4\x44\xdd\x2f\xff\x5d\x7f\x98\x0d\xdd\x2a\x1b\x7e\x67\x6b\xae\x85\xed\x95\xe6\xe1\x34\xf4\xf7\xa4\x73\xad\x56\x3c\x0b\xfb\x1c\x2f\x0c\xc2\x31\x5e\xe0\x2c\x02\xff\x8b\x82\x01\x3d\xb1\x35\x9a\xdd\x2c\x08\x27\x41\x71\x58\x98\x15\xcf\x82\x02\xcd\x1f\x9d\xb0\x8d\xfc\x5d\x14\x96\x48\x01\x51\x97\xba\xc8\x95\x16\xf7\x88\x78\xc1\xf1\x92\xba\x24\x73\xdc\x20\x7a\x42\x50\x47\xe1\xf6\x0c\x6e\xc1\x9a\x00\xa0\x28\x1d\xdc\x44\xb7\x58\x49\x9e\x8b\xbe\x87\x8f\xc9\x33\x15\x33\x4a\xcc\x22\xea\x41\x1c\xc6\x34\x97\xb2\x82\x68\x71\xa2\x52\x79\x12\x7d\x4f\x5d\xaa\x30\xfe\xba\x3d\xf8\x80\x44\xf1\xca\x68\xcc\x8d\xdd\x63\x4e\x51\x75\x81\x7e\x58\x53\x1a\x94\xec\x0a\x3a\x46\x33\xa2\x6c\x84\xa0\xf9\x1a\x60\x72\x8e\x61\xc2\xdb\xa1\xde\xa4\x29\x4e\xa9\x84\xcd\x24\x99\x85\x27\x44\x34\xdf\xe8\xd8\x89\xd1\x88\x53\x56\x7a\x93\xe1\x99\x3a\xfb\x86\x8a\x4b\xdf\xcc\x26\x0b\xa8\xb3\x94\x34\x45\xd8\x00\x50\xc7\xae\x10\xd9\x79\xbb\x1a\x75\x0a\xae\x23\x7a\x25\x72\x56\x65\x0d\xec\xb7\x8f\xef\xaf\xdf\x7d\xfd\x5c\x0e\x60\xa7\xc4\x79\x54\xcf\xad\xa2\xe9\x0c\xee\x18\x96\x55\xf2\x48\x5d\xda\x2d\x24\x65\x9c\xa0\x21\x16\xa7\x82\xe8\xff\xa6\x0e\x52\xc9\x9d\x66\xb7\x33\x76\x99\x63\x72\x7e\xea\xc5\xbf\xb7\x9c\xe1\xc7\x64\x34\x42\x8b\xf1\x19\x12\x53\x68\x90\xa7\xcc\x19\x46\xff\x4c\x28\x31\x9a\xa9\x35\xf5\xaa\x83\x66\xf8\x9c\x4c\x91\x49\xd2\x62\x5a\x39\xe3\xa7\x91\x62\x18\x55\xe1\x03\xe9\x2c\xaf\x37\x9c\x17\xac\x54\x92\x58\xce\xf3\x52\xb9\x32\x74\x8a\xb0\xb2\x63\x40\x96\xd7\xb3\xb0\x7f\x94\x99\x2f\xd2\x44\x0f\xa8\xe5\xbf\xca\xe7\x96\xd7\x6d\xb2\x83\x63\x86\x8c\x95\xd6\xc6\x95\x78\xfb\x36\x2c\xaf\x83\xc2\x88\xfb\xd6\x6b\x35\x62\xa3\x35\xc7\x4e\xb6\xe2\x1e\x83\x3f\x94\xa0\x6a\xa8\x77\xf5\xa9\x57\xff\xaf\x39\xbc\xa9\xc6\xbf\x95\x1a\x89\x72\xea\xad\xa9\xfc\xae\x58\x53\xe0\x05\x4e\x49\x8a\x68\x5c\x3e\x7a\x99\xab\x78\xbf\x16\x3c\x32\x5e\xa0\x76\x4b\xf4\x9e\x91\x59\xd1\x0e\x61\xff\xf2\x22\x1a\x0f\xf0\xda\x2b\x33\xbc\x62\x6f\x27\x5c\x5e\xe0\xd5\x33\x8b\x37\x0e\x51\xf2\x37\xa2\x39\x26\x03\x6a\x4f\xb1\xea\xae\x9e\xa2\x37\x51\x58\x63\x63\x2b\xaa\x3c\x15\xbd\x55\x76\xda\x6f\x0a\xc9\x4d\xaa\xfc\x2b\x3c\xb0\x54\x6c\x59\xb9\x83\x95\x12\x90\x64\x48\xe1\xd7\x63\xc2\xdb\x16\xa2\xaf\xae\xf3\x7a\x39\xf8\xa8\xf2\x82\x1f\x38\x6e\x56\xc6\xb1\xdc\x4d\x76\x3c\x41\x79\x37\xb7\x88\x1c\xa6\x12\x79\xef\x50\xf5\xc6\xe9\x57\x00\x00\x00\xff\xff\xc3\x84\x7b\x55\xc1\x05\x00\x00")

func scriptsNetworkShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsNetworkSh,
		"scripts/network.sh",
	)
}

func scriptsNetworkSh() (*asset, error) {
	bytes, err := scriptsNetworkShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/network.sh", size: 1473, mode: os.FileMode(420), modTime: time.Unix(1482164510, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/network.sh": scriptsNetworkSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"network.sh": &bintree{scriptsNetworkSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

