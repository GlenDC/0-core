// Code generated by go-bindata.
// sources:
// scripts/network.sh
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsNetworkSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x5d\x6f\xc2\x46\x10\x7c\x66\x7f\xc5\xc4\x58\x21\xa8\x75\xf9\x90\x52\xa5\x44\x44\xea\x97\xda\xa8\xad\x12\xb5\xe9\x4b\xa3\x54\xba\x9c\x97\xb0\xc5\xdc\x99\xf3\x01\xf9\xfc\xef\xd5\xd9\xc6\x18\xa9\x44\x2a\x3c\xf9\x6e\x6f\x76\x66\x77\x76\xbb\x27\x83\x47\x31\x83\x47\x55\xcc\xa9\x60\x8f\x84\x89\xba\xb7\xdf\xde\xfd\x3c\x1d\xf8\x65\x3e\xf8\x8b\x9d\xbd\x13\x76\x37\x86\x07\x93\x38\x9c\x93\x29\x8c\x5a\xf2\x34\x3e\x63\x3d\xb7\x88\x47\x78\x87\x77\x88\xc2\x3f\x89\xfa\xf4\xca\xce\xce\xed\x92\xa7\x51\x09\x10\x3e\xbd\xb0\x4b\xc2\x59\x12\x57\x8f\xa3\x32\xca\xb0\x9f\x46\x17\xc3\xf3\xaf\xf5\x98\xc7\x23\x3d\x0c\xbf\x51\x44\xd4\xa5\x2e\x0a\x65\xc4\xbf\x40\xcf\x59\x2f\xa8\x4b\x32\xc3\x3d\x92\x57\x44\x3b\x00\x3c\x5c\xc2\xcf\xd9\x10\x00\x94\x44\xa2\xfb\xe4\x01\x4b\x29\x0a\x31\x4f\x08\x31\x45\xae\x34\xa3\x4a\x57\x46\x3d\x8b\xc7\x88\x66\x52\x65\x10\x23\x5e\x54\x26\xaf\x62\x9e\xa8\x4b\x35\xc6\x17\x0f\x07\x17\x48\x15\x2f\xad\xc1\xcc\xba\x3d\xe6\x04\x35\x0b\x9c\xc5\x3b\xb5\xfd\x4a\x52\xa9\xd4\x1a\x46\x92\x0f\x11\x35\xb7\x11\xc6\x57\x18\xa4\xbc\x19\x98\x75\x96\xe1\x94\x2a\xd8\x5c\xd2\x69\x7c\x42\x44\xb3\xb5\xd1\x5e\xac\x81\xce\x58\x99\x75\x8e\x37\xea\xec\x09\x95\x87\x81\xcc\x3a\x8f\xa8\xb3\x90\x2c\x43\xdc\x00\x50\xc7\x2d\x91\xb8\x59\x3b\x1b\x75\x4a\xad\x43\xfa\x20\xf2\x4e\xe5\x0d\xec\x1f\xd7\x3f\xdd\xfd\xf8\xfb\x6f\x55\x01\xb6\x4a\x7c\x40\x0d\xda\x6a\x99\xde\xe2\x91\xe1\x58\xa5\x2f\xd4\xa5\xed\x5c\x32\xc6\x09\x1a\x61\x3a\x13\x24\x3f\x34\x79\x90\x49\xe1\x0d\xfb\xad\x75\x8b\x02\xe3\xab\xd3\x60\x85\x27\xc7\x39\xfe\x1e\x0f\x87\x68\x29\xbe\x44\x6a\xcb\x1e\x14\x19\x73\x8e\xe1\x57\x63\x4a\xad\x61\x6a\x55\xbd\x66\xd0\x14\x9f\xd3\x09\x72\x49\x5b\x4a\x6b\x67\xfc\x63\xa5\x2c\x46\x9d\xf8\xa0\x75\x8e\x57\x6b\x2e\x4a\x55\x2a\x4d\x1d\x17\x45\xd5\xb9\x2a\x74\x82\xb8\xb6\x5d\x44\x8e\x57\xd3\xf8\xec\xa8\xb2\x90\xa4\x89\xee\x53\xcb\x7f\xb5\xeb\x1d\xaf\xda\x62\xfb\xc7\x0c\xa9\x95\x31\xd6\x57\x78\x7b\x1a\x8e\x57\x51\x69\xc4\x3d\xf5\x5d\x37\xb4\x35\x86\xb5\x97\x8d\xf8\x97\xe8\x7f\xb6\xa0\x26\xd4\xbb\xf9\x05\xb7\x7f\x7e\xf7\xeb\xf5\xf7\xbd\x4f\x9b\x70\x5e\x37\x21\x55\x5e\x7d\x56\x8c\xff\xca\xb1\xab\x4d\x18\x7e\x25\x19\x92\x51\x35\xf9\x32\x53\x7a\xbf\x1b\x02\x32\xde\xa1\xb6\x0b\xf4\xde\x90\x3b\x31\x1e\xf1\x05\x3e\x7a\x55\x70\xe8\xd1\xe7\xb1\xdf\xe0\xa3\x87\x77\xe8\xb5\x47\x92\x7e\x89\x64\x86\x71\xbf\x5d\xb5\x9a\xd6\xae\x6a\xc1\x34\xf1\x0e\x19\x1b\x51\xd5\x57\x49\xaa\xb6\xcf\x7e\x33\x48\x61\x33\x15\xa6\xee\xc0\x42\xda\xb1\xf2\x07\x2b\x24\x22\xc9\x91\x21\x2c\xc7\x94\x37\x2d\xc4\x90\xdd\x14\xbb\x65\x10\xa2\xaa\x03\x7e\x66\xdd\xac\x88\x63\x6f\xd7\xf9\xf1\x07\x2a\xb8\xb7\x25\xe4\xf0\x29\x51\xf0\x0a\xd5\x33\x4d\xff\x06\x00\x00\xff\xff\x66\x55\x83\x5b\xc1\x05\x00\x00")

func scriptsNetworkShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsNetworkSh,
		"scripts/network.sh",
	)
}

func scriptsNetworkSh() (*asset, error) {
	bytes, err := scriptsNetworkShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/network.sh", size: 1473, mode: os.FileMode(436), modTime: time.Unix(1478181585, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/network.sh": scriptsNetworkSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"network.sh": &bintree{scriptsNetworkSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

