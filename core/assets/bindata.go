// Code generated by go-bindata.
// sources:
// scripts/network.sh
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _scriptsNetworkSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\x5d\x6b\xe3\x48\x10\x7c\x76\xff\x8a\x8a\x2c\xe2\x98\x3b\x9d\x1d\xc3\xc1\x9d\x83\x03\xf7\xc5\x5d\xb8\x5d\x12\x76\xb3\x2f\x1b\xb2\x30\x91\xda\x71\xaf\xe5\x19\x79\x66\x6c\xe7\xf3\xbf\x2f\x23\xc9\xb2\x0c\xeb\xc0\xa2\xa7\x19\xf5\x54\x77\x75\x55\x77\xf7\x68\x70\x27\x7a\x70\xa7\xdc\x8c\x1c\x7b\x24\x4c\xd4\xbd\xfa\xe3\xfa\xbf\xc9\xc0\x2f\x8a\xc1\x67\xb6\xe6\x5a\xd8\x5e\x6a\x1e\x8c\xe3\x70\x4f\xda\x69\xb5\xe0\x49\x7c\xc2\xe9\xcc\x20\x3e\xc5\x0b\xbc\x45\x14\xbe\x24\xea\xd3\x13\x5b\xa3\xd9\x4f\xa2\x78\x14\x95\x87\x99\x59\xf0\x24\x2a\xd1\xc2\xd1\x0b\xdb\x24\xdc\x25\x71\x85\x14\x11\x75\xa9\x0b\xa7\xb4\xf8\x47\xa4\x33\x4e\xe7\xd4\x25\x99\xe2\x06\xc9\x13\xa2\x6d\x14\x6e\xcf\xe0\x67\xac\x09\x00\xca\xd4\xd1\x4d\x72\x8b\x85\x38\x27\xfa\x1e\x21\xc6\x15\x2a\x65\x54\x98\x65\xd4\x83\x78\x9c\xd2\x54\xaa\x0c\xa2\xc5\x8b\xca\xe5\x49\xf4\x3d\x75\xa9\xc6\xf8\xe9\x76\xef\x07\x32\xc5\x0b\xa3\x31\x35\x76\x87\x39\x46\x5d\x05\x4e\xe2\x2d\xa5\x7e\xc5\xae\xa4\x63\x34\x23\x29\x86\x88\x9a\xbf\x11\x46\xe7\x18\x64\xbc\x1e\xe8\x55\x9e\xe3\x98\x2a\xd8\x42\xb2\x49\x7c\x44\x44\xd3\x95\x4e\xbd\x18\x8d\x34\x67\xa5\x57\x05\x9e\xa9\xb3\x2b\xa8\xbc\x0c\xc5\xac\x8a\x88\x3a\x73\xc9\x73\xc4\x0d\x00\x75\xec\x02\x89\x9d\xb6\xb3\x51\xa7\xe4\x3a\xa4\x57\x22\x6f\x55\xd1\xc0\x7e\xbc\xf8\xf7\xfa\x9f\x0f\xef\xab\x06\x6c\x94\xf8\x80\x1a\xb8\xd5\x34\xbd\xc1\x1d\xc3\xb2\xca\x1e\xa9\x4b\x9b\x99\xe4\x8c\x23\x34\xc4\xd2\x5c\x90\xfc\xdd\xe4\x41\x2e\xce\x6b\xf6\x1b\x63\xe7\x0e\xa3\xf3\xe3\x20\xfe\xbd\xe5\x02\x5f\x46\xc3\x21\x5a\x8c\xcf\x90\x99\x52\x03\x97\x33\x17\x18\xfe\x32\xa2\xcc\x68\xa6\x56\xd7\xeb\x0a\x9a\xe6\x73\x36\x46\x21\x59\x8b\x69\xed\x8c\xaf\x46\xca\x66\xd4\x89\xf7\xa4\xb3\xbc\x5c\xb1\x2b\x59\xa9\x2c\xb3\xec\x5c\xa5\x5c\x15\x3a\x46\x5c\xdb\x31\x22\xcb\xcb\x49\x7c\x72\x90\x59\x48\xd2\x44\xf7\xa9\xe5\xbf\xda\xe7\x96\x97\x6d\xb2\xfd\x43\x86\x4c\x95\xd6\xc6\x57\x78\xbb\x32\x2c\x2f\xa3\xd2\x88\xbb\xd2\xb7\x6a\xa4\x46\x6b\x4e\xbd\xac\xc5\x3f\x46\x3f\x28\x41\x5d\x50\xef\xf2\x7f\x5c\x7d\xfa\xf3\xdd\xc5\x5f\xbd\x37\x45\xf8\xb5\x16\x21\x53\x5e\xbd\xd5\x8c\xef\xe5\xd8\xf6\x26\x8c\xbb\x92\x1c\xc9\x69\x35\xeb\x32\x55\xe9\x6e\x1b\x04\x64\xbc\x40\x6d\xe6\xe8\x3d\xa3\xb0\xa2\x3d\xe2\xdf\xf0\xda\xab\x82\x83\x46\x6f\xc7\xfe\x8e\xd7\x1e\x5e\x90\xae\x3c\x92\xec\x67\x24\x53\x8c\xfa\xed\xae\xd5\x65\x6d\xbb\x16\x4c\x13\x6f\x91\xb1\x16\x55\x9d\xca\xa2\x6a\xfb\xec\x36\x83\x38\x93\xab\x30\x75\x7b\x16\x4a\x2d\x2b\xbf\xb7\x42\x22\x92\x02\x39\xc2\x3a\xcc\x78\xdd\x42\x0c\xd9\xb5\xdb\x2e\x83\x10\x55\x5d\xf0\x03\xa7\xcd\x8a\x38\xf4\x76\x55\x1c\x7e\xa0\x82\x7b\x5b\x44\xf6\x9f\x12\x05\xaf\x50\x3d\xd3\xf4\x2d\x00\x00\xff\xff\x96\x43\xb1\x0e\xb3\x05\x00\x00")

func scriptsNetworkShBytes() ([]byte, error) {
	return bindataRead(
		_scriptsNetworkSh,
		"scripts/network.sh",
	)
}

func scriptsNetworkSh() (*asset, error) {
	bytes, err := scriptsNetworkShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "scripts/network.sh", size: 1459, mode: os.FileMode(436), modTime: time.Unix(1479710693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"scripts/network.sh": scriptsNetworkSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"scripts": &bintree{nil, map[string]*bintree{
		"network.sh": &bintree{scriptsNetworkSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

